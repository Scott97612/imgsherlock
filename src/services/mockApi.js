/**
 * Mock API service for local testing
 * This simulates the backend responses while the real backend is being developed
 */

// Simulated delay time in milliseconds
const DELAY = 2000;

// Randomly determine if an image is AI-generated (for testing)
const getRandomDetectionResult = () => {
  // 50% chance for each type for testing purposes
  const isAiGenerated = Math.random() > 0.5;
  
  // Generate a random confidence score appropriate for the result
  let confidence;
  if (isAiGenerated) {
    // Higher confidence for AI-generated (between 65% and 98%)
    confidence = 0.65 + (Math.random() * 0.33);
  } else {
    // Lower confidence for real images (between 55% and 90%)
    confidence = 0.55 + (Math.random() * 0.35);
  }

  // Generate appropriate detection details
  let details;
  if (isAiGenerated) {
    const aiTools = ['DALLÂ·E', 'Midjourney', 'Stable Diffusion', 'Firefly'];
    const randomTool = aiTools[Math.floor(Math.random() * aiTools.length)];
    details = `The image appears to have visual patterns consistent with AI generation. There's a ${Math.round(confidence * 100)}% probability this was created using ${randomTool} or similar technology. The image contains telltale signs such as unusual texture patterns, perfect symmetry, and characteristic artifacts common in AI-generated content.`;
  } else {
    details = `The image has characteristics consistent with natural photography. Natural lighting patterns, realistic details, and organic imperfections suggest this image was captured with a camera rather than generated by AI. However, as AI technology improves, detection becomes more challenging.`;
  }

  return {
    isAiGenerated,
    confidence,
    details,
  };
};

const mockApiService = {
  /**
   * Simulates uploading and analyzing an image
   * @param {File} image - The image file to analyze
   * @returns {Promise} - Promise with the mock detection results
   */
  checkImage: async (image) => {
    // Validate that an image was provided
    if (!image) {
      throw new Error('No image provided');
    }
    
    // Validate file type
    const validTypes = ['image/jpeg', 'image/png', 'image/gif', 'image/webp'];
    if (!validTypes.includes(image.type)) {
      throw new Error('Invalid file type. Please upload a JPG, PNG, GIF, or WebP image.');
    }
    
    // Simulated API delay
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(getRandomDetectionResult());
      }, DELAY);
    });
  },
};

export default mockApiService; 